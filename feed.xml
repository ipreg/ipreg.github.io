<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://ipreg.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ipreg.github.io/" rel="alternate" type="text/html" /><updated>2021-11-16T09:31:29-05:00</updated><id>https://ipreg.github.io/feed.xml</id><title type="html">IPreg’s Blog</title><subtitle>A place for my thoughts
</subtitle><author><name>ipreg</name></author><entry><title type="html">Ren’Py library support, and other such nonsense</title><link href="https://ipreg.github.io/2021/11/16/RenPy-library-support-and-other-such-nonsense.html" rel="alternate" type="text/html" title="Ren’Py library support, and other such nonsense" /><published>2021-11-16T00:00:00-05:00</published><updated>2021-11-16T00:00:00-05:00</updated><id>https://ipreg.github.io/2021/11/16/RenPy-library-support-and-other-such-nonsense</id><content type="html" xml:base="https://ipreg.github.io/2021/11/16/RenPy-library-support-and-other-such-nonsense.html">&lt;p&gt;Have you ever thought “it would be really great to have the entire standard python library or other libraries like &lt;a href=&quot;https://www.google.com/search?q=renpy+numpy+site%3Alemmasoft.renai.us&quot;&gt;Numpy&lt;/a&gt; inside Ren’Py, but the packages pip installs aren’t working or keep returning errors?”. Well, you are probably going to need to recompile Ren’Py of which the information about is no where and how to change the build files are similar. I also discuss using PyPy as a supplement to Ren’Py to help move things along at the bottom of the post.
&lt;!--more--&gt;&lt;/p&gt;
&lt;h1 id=&quot;rebuilding-renpy&quot;&gt;Rebuilding Ren’Py&lt;/h1&gt;
&lt;h2 id=&quot;renpy-build-introduction&quot;&gt;Ren’Py Build Introduction&lt;/h2&gt;
&lt;p&gt;The way Ren’Py actually builds itself is hidden inside the &lt;a href=&quot;https://github.com/renpy/renpy-build&quot;&gt;Ren’Py Build&lt;/a&gt; repository. The main files to focus on is inside the &lt;a href=&quot;https://github.com/renpy/renpy-build/tree/master/tasks&quot;&gt;tasks&lt;/a&gt; folder, most of the repo is making things nice and whatnot; the &lt;a href=&quot;https://github.com/renpy/renpy-build/tree/master/tasks&quot;&gt;tasks&lt;/a&gt; folder takes the various things Ren’Py Tom wants from the dependencies and modifies them to be “easier” to manage. There are three main components to  Ren’Py: all the C stuff, all the Python stuff, and all the non-linear time stuff. This post will mostly talk about the first two as &lt;a href=&quot;/2021/09/25/thoughts-on-renpy.html&quot;&gt;this post&lt;/a&gt; discusses my thoughts on the last one. If you are going down this road, then you will need to understand how Ren’Py and Python interact; and how Python works at it’s core.&lt;/p&gt;
&lt;h2 id=&quot;how-does-python-work&quot;&gt;How does Python work?&lt;/h2&gt;
&lt;p&gt;When dealing with things at this level, it helps me to think about Python not as the &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;thing you download on the website&lt;/a&gt; but as instead the &lt;a href=&quot;https://docs.python.org/3/reference/grammar.html&quot;&gt;Python Grammar Specification&lt;/a&gt;; &lt;a href=&quot;https://en.wikipedia.org/wiki/Programming_language_implementation&quot;&gt;which has several implementations&lt;/a&gt;. The two most popular implementations are &lt;a href=&quot;https://github.com/python/cpython&quot;&gt;CPython&lt;/a&gt; (&lt;a href=&quot;https://en.wikipedia.org/wiki/CPython&quot;&gt;wiki&lt;/a&gt;) and &lt;a href=&quot;https://foss.heptapod.net/pypy/pypy&quot;&gt;PyPy&lt;/a&gt;(&lt;a href=&quot;https://en.wikipedia.org/wiki/PyPy&quot;&gt;wiki&lt;/a&gt;). CPython is the “official” python implementation ran by the &lt;a href=&quot;https://www.python.org/psf-landing/&quot;&gt;PSF&lt;/a&gt; which is written in C, while PyPy is “written in Python” (A very squirrely phrase for a reason, as &lt;a href=&quot;https://doc.pypy.org/en/latest/architecture.html&quot;&gt;it’s pretty complicated&lt;/a&gt;). Ren’Py uses the CPython implementation; which means for Ren’Py to work it must take all the C code and package it up for everyone to use; a problem that honestly goes back to the beginning of computers, and how computer languages have risen and fallen trying to make this easier. At least now we don’t usually worry about the specific processors people have as everyone has mostly agreed to use the same sets of &lt;a href=&quot;https://en.wikipedia.org/wiki/Comparison_of_instruction_set_architectures&quot;&gt;Instructions&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;renpy-building-and-its-beautiful-tasks&quot;&gt;Ren’Py building and it’s beautiful tasks&lt;/h2&gt;
&lt;p&gt;Back to Ren’Py tasks, if you look at the &lt;a href=&quot;https://github.com/renpy/renpy-build/blob/master/tasks/python2.py&quot;&gt;Python 2 Task&lt;/a&gt;, &lt;a href=&quot;https://github.com/renpy/renpy-build/blob/master/tasks/pythonlib.py&quot;&gt;Python Library Task&lt;/a&gt; and the &lt;a href=&quot;https://github.com/renpy/renpy-build/blob/master/tasks/renpython.py&quot;&gt;Renpy Library Task&lt;/a&gt;; this should give you an idea of how the build system bundles all this up. The Python 2 Task takes the CPython source and compiles it into a python binary directly, with some small changes, one for every supported system. The build system also takes all of the “Python Standard Library” C source files and compiles &lt;em&gt;all of them&lt;/em&gt; into a single object file called “librenpython” which you will find in the associated “&amp;lt;renpy-sdk&amp;gt;/lib/&amp;lt;architechure&amp;gt;” folder (The renpy-sdk is what is downloaded from the &lt;a href=&quot;https://www.renpy.org/&quot;&gt;official Ren’Py website&lt;/a&gt;). It also does something similar for the “Python Standard Library” Python source files which is &lt;a href=&quot;https://stackabuse.com/differences-between-pyc-pyd-and-pyo-python-files/&quot;&gt;“compiled” into Python module code&lt;/a&gt;. You can actually see a couple fingerprints left behind inside Ren’Py from all of this compilation. If you open up the Ren’Py terminal in any Ren’Py project, and dig into the depths of the code, you can find it.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; import sys; print(repr(sys.modules['builtins'].super.__code__))
&amp;lt;code object newsuper at 0000000002ba00b0, file &quot;/home/tom/ab/renpy-build/tmp/install.linux-x86_64/lib/python2.7/site-packages/future/builtins/newsuper.py&quot;, line 45&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Aside: This is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;super&lt;/code&gt; function from the absolutely fantastic &lt;a href=&quot;https://github.com/PythonCharmers/python-future&quot;&gt;Python Future&lt;/a&gt; library which allows for some Python 3 stuff to show up in Python 2 (and Ren’Py by extension). This is not documented anywhere, so let me say that if you are extensively using Python in your Ren’Py project; this and the &lt;a href=&quot;https://github.com/benjaminp/six&quot;&gt;Six library&lt;/a&gt; are like making an old family recipe in your kitchen.&lt;/p&gt;
&lt;h2 id=&quot;finally-how-to-rebuild-with-dependencies&quot;&gt;Finally, how to rebuild with dependencies&lt;/h2&gt;
&lt;p&gt;(Warning: this is based on speculation as my computer isn’t powerful enough to do it \;_\;) After the Setup step in the Ren’Py Build process, which downloads all the files and puts them into the proper places. Edit &lt;a href=&quot;https://github.com/renpy/renpy-build/blob/master/tasks/renpython.py&quot;&gt;renpython&lt;/a&gt; and &lt;a href=&quot;https://github.com/renpy/renpy-build/blob/master/tasks/pythonlib.py&quot;&gt;pythonlib&lt;/a&gt; to include the dependencies. Looking at the &lt;a href=&quot;https://github.com/python/cpython#build-instructions&quot;&gt;CPython build documentation&lt;/a&gt; should point you into the correct direction on what to edit.&lt;/p&gt;

&lt;h1 id=&quot;what-if-i-dont-want-to-do-that&quot;&gt;What if I don’t want to do that?&lt;/h1&gt;
&lt;p&gt;Well, firstly this comes down to a singular issue where the Ren’Py compiled Python is different from regular Python. This means the Ren’Py python binary file isn’t looking for more than what is pointed to in the compiled library files; and that those compiled python libraries are also set in stone so they don’t look for edits as well. There are several things which determine how far you want to go:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Take some of the PyPy code (with credit) and supplement the incomplete standard library&lt;/li&gt;
  &lt;li&gt;Use the now more complete standard library and see if what you are trying works&lt;/li&gt;
  &lt;li&gt;If it doesn’t work, you will need to put in elbow grease and teach the existing python to try to find, then load the code with changes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__.py&lt;/code&gt; for the module using your now more complete library.&lt;/li&gt;
  &lt;li&gt;Be very careful about the Ren’Py namespace as it maps itself to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store&lt;/code&gt; and everything in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;store&lt;/code&gt; is thrown into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pickle&lt;/code&gt; for saving and loading. Now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pickle&lt;/code&gt; (Esp. in Python 2.7) is not a general python serializer so polluting the namespace has serious consequences.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;wait-is-that-it&quot;&gt;Wait, is that it?&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ipreg/RenPy_PyPy&quot;&gt;Here is a script I used in my testing of PyPy&lt;/a&gt;; I ultimately determined that I wouldn’t need any of this and it turned out to be a huge waste of time.&lt;/p&gt;</content><author><name>ipreg</name></author><summary type="html">Have you ever thought “it would be really great to have the entire standard python library or other libraries like Numpy inside Ren’Py, but the packages pip installs aren’t working or keep returning errors?”. Well, you are probably going to need to recompile Ren’Py of which the information about is no where and how to change the build files are similar. I also discuss using PyPy as a supplement to Ren’Py to help move things along at the bottom of the post.</summary></entry><entry><title type="html">Ren’Py Shaders</title><link href="https://ipreg.github.io/2021/10/22/Renpy-Shader.html" rel="alternate" type="text/html" title="Ren’Py Shaders" /><published>2021-10-22T00:00:00-04:00</published><updated>2021-10-22T00:00:00-04:00</updated><id>https://ipreg.github.io/2021/10/22/Renpy-Shader</id><content type="html" xml:base="https://ipreg.github.io/2021/10/22/Renpy-Shader.html">&lt;p&gt;I decided to spend some time learning how to perform shaders inside Ren’Py. Specifically I wanted to be able to port shaders from &lt;a href=&quot;https://www.shadertoy.com/&quot;&gt;ShaderToy&lt;/a&gt; into Ren’Py. While there &lt;a href=&quot;https://www.renpy.org/doc/html/model.html&quot;&gt;is a page on it&lt;/a&gt; in the documentation, it doesn’t really give very good examples on how to implement them yourself or that Ren’Py literally implements the entirety of GLSL (As long as your system supports it). These shaders can be placed on literally any image in the game and I actually got much better framerates inside Ren’Py then I did inside the Shadertoy website itself.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h2 id=&quot;porting-shadertoy-audio-to-renpy&quot;&gt;Porting shadertoy audio to Ren’Py&lt;/h2&gt;
&lt;p&gt;I figured out a way to do it with very little code change. The biggest challenge was dealing with uniforms, as I make exclusive use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fragment_functions&lt;/code&gt; which do not have uniforms propagated through them. There were two ways to deal with these: pass them as function arguments, or use them in global variables; and unfortunately there isn’t a universal solution. If they don’t work as global variables, pass them as function arguments. As reference here is the generic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;register_shader&lt;/code&gt; function I use to begin my porting into a 1920 x 1080 game like “A Town Unfiltered”&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;renpy.register_shader(&quot;&amp;lt;some unique name&amp;gt;&quot;, variables=&quot;&quot;&quot;
    uniform sampler2D tex0;
    uniform sampler2D tex1;
    uniform vec2 u_model_size;
    uniform float u_time;
    uniform float u_start_time;
    uniform float u_time_index_ratio;
    uniform float u_num_frames;
    varying vec2 v_tex_coord;
    attribute vec2 a_tex_coord;
&quot;&quot;&quot;, vertex_200=&quot;&quot;&quot;
    v_tex_coord = a_tex_coord;
&quot;&quot;&quot;, fragment_functions=&quot;&quot;&quot;

... Bunch of Code ...

    &quot;&quot;&quot;, fragment_200=&quot;&quot;&quot;
    vec2 iResolution = vec2(1920, 1080);
    vec2 fragCoord = v_tex_coord * iResolution;
    float iTime_in = (u_time - u_start_time);
    vec4 out_col = vec4(0.);

    float time_index_ratio_in = u_time_index_ratio;
    float num_frames_in = u_num_frames;

    mainImage(out_col, fragCoord, iTime_in, iResolution, tex1, time_index_ratio_in, num_frames_in);

    gl_FragColor = out_col;
&quot;&quot;&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mainImage&lt;/code&gt; function is exactly the same as the ShaderToy one, except with all the uniforms attached to it.&lt;/p&gt;

&lt;p&gt;This particular shader had music attached to it so there are three uniforms associated with it: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u_time_index_ratio&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u_num_frames&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tex1&lt;/code&gt; (All non-texture uniforms start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u_&lt;/code&gt;). These are the parameters associated with telling the shader about the music texture associated with a song. A music texture is an image where each pixel represents a value of time and frequency. I set it up so that rows are the time axis and columns are the frequency. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u_time_index_ratio&lt;/code&gt;converts the time in seconds to which row number to look at, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u_num_frames&lt;/code&gt; is used so that the animation associated with the song can be repeated, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tex1&lt;/code&gt; is the actual music texture. As a gift to the world, here is the python script I used to generate the music texture using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;librosa&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;numpy&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pillow&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import librosa
import numpy as np
from PIL import Image

import math


# https://stackoverflow.com/questions/67076249/music-visualizer-using-python-and-librosa
def next_power_of_2(x):
    return 2 ** (math.ceil(math.log(x, 2)))


def params_for_fps(fps=30, sr=16000):
    frame_seconds = 1.0 / fps
    frame_hop = round(frame_seconds * sr)  # in samples
    frame_fft = next_power_of_2(2 * frame_hop)
    rel_error = (frame_hop - (frame_seconds * sr)) / frame_hop

    return frame_hop, frame_fft, rel_error


def get_decibel(target_time, freq, linarize=True):
    pow = spectrogram[int(freq * frequencies_index_ratio)][int(target_time * time_index_ratio)]
    if linarize:
        pow = (pow / 80) + 1
        pow = np.clip(pow, 0., 1.)
    return pow


nFFT = 2048 * 4
sampRate = 22050
fps = 10

seconds = 60 * 5
frame_hop, frame_fft, frame_err = params_for_fps(fps=fps, sr=sampRate)
print(f&quot;Frame timestep error {frame_err * 100:.2f} %&quot;)
drift = frame_err * seconds
print(f&quot;Drift over {seconds} seconds: {drift:.2f} seconds. {drift * fps:.2f} frames&quot;)

time_series, sample_rate = librosa.load(&quot;&amp;lt;music file&amp;gt;.mp3&quot;, mono=True, sr=sampRate)

# getting a matrix which contains amplitude values according to frequency and time indexes
stft = np.abs(librosa.stft(time_series, hop_length=frame_hop, n_fft=frame_fft))
# converting the matrix to decibel matrix
spectrogram = librosa.amplitude_to_db(stft, ref=np.max)
frequencies = librosa.core.fft_frequencies(n_fft=frame_fft)  # getting an array of frequencies
times = librosa.core.frames_to_time(np.arange(spectrogram.shape[1]), sr=sample_rate, hop_length=frame_hop, n_fft=frame_fft) # getting the array of times

frequencies_index_ratio = len(frequencies) / frequencies[len(frequencies) - 1]
time_index_ratio = len(times) / times[len(times) - 1]

reducespec = np.zeros((64, spectrogram.shape[1]))

maxFreq = np.max(frequencies)
minFreq = 15.0  # Technically it is zero, but this looks better and won't break everything

# Looks better if the frequency bins are logarithmic
freq = np.logspace(np.log10(minFreq), np.log10(maxFreq), 65).tolist()

# We want the middle of the bins
freqList = [np.around((freq[j] + freq[j + 1]) / 2, 1) for j in range(len(freq) - 1)]

for freqI, freqV in enumerate(freqList):
    for timeI, timeV in enumerate(times):
        try:
            reducespec[freqI][timeI] = get_decibel(timeV, freqV)
        except IndexError:
            print(&quot;error at t=&quot;, timeV, &quot;; f=&quot;, freqV)

arrShape = reducespec.shape

newImage = Image.new(&quot;RGBA&quot;, arrShape, color=0)

for i in range(arrShape[0]):
    for j in range(arrShape[1]):
        powIn = reducespec[i][j]
        pxV = int(np.clip(powIn * 255, 0., 255.))  # Only works if linearized between 0 and 255
        newImage.putpixel((i, j), (pxV, pxV, pxV, 255)) # Nothing complicated, use any r/g/b value as the value for the bin

newImage.save(&quot;&amp;lt;Image Filename&amp;gt;.png&quot;)

with open(&quot;meta.txt&quot;, &quot;w&quot;) as fp:
    fp.write(&quot;time index ratio : &quot; + str(time_index_ratio) + &quot;\n number of frames : &quot; + str(arrShape[1]))

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Originally I was going to try to do this inside Ren’Py itself, but why when you just need the texture?&lt;/p&gt;

&lt;p&gt;Finally, there is one more uniform: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u_start_time&lt;/code&gt; which is given by a piece of code I found inside Ren’Py which tells the entire game how long it has been open for (and is how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;u_time&lt;/code&gt; uniform is set. It resets after a day, so as long as you aren’t trying to use these shaders after having the game open for 23 hours and 59 minutes, it should always work.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ currentstarttime = float((renpy.display.interface.frame_time - renpy.display.interface.init_time) % 86400)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and finally this is how I put it all together&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;transform movietest(input1):
    Model().texture(&quot;&amp;lt;music_texture&amp;gt;&quot;).uniform(&quot;u_start_time&quot;, input1).uniform(&quot;u_time_index_ratio&quot;, &amp;lt;Whatever popped out from above&amp;gt;).uniform(&quot;u_num_frames&quot;, &amp;lt;Whatever popped out from above&amp;gt;)
    shader [ &quot;movie.test&quot; ]

screen movie_theater:
    vbox:
        textbutton &quot;Leave&quot; xalign 0.1 yalign 0.8 action Jump(&quot;finish_movie&quot;)


label play_movie:
  $ renpy.stop_predict_screen(&quot;movie1&quot;)
  $ renpy.maximum_framerate(86400)
  play music &quot;&amp;lt;music_file&amp;gt;&quot; fadein 0.5
  pause 0.7 # Adjust to taste
  $ currentstarttime = float((renpy.display.interface.frame_time - renpy.display.interface.init_time) % 86400)
  show blue at movie1(currentstarttime) # blue generates a screen filling blue texture, which we overwrite with a shader
  call screen movie_theater

label finish_movie:
    scene black with fade
    hide blue
    stop music fadeout 0.5
    $ renpy.maximum_framerate(None)
    pause 2.0
    return

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you haven’t yet, try watching a movie in “A Town Unfiltered”; I spent a lot of time figuring this shit out.&lt;/p&gt;</content><author><name>ipreg</name></author><summary type="html">I decided to spend some time learning how to perform shaders inside Ren’Py. Specifically I wanted to be able to port shaders from ShaderToy into Ren’Py. While there is a page on it in the documentation, it doesn’t really give very good examples on how to implement them yourself or that Ren’Py literally implements the entirety of GLSL (As long as your system supports it). These shaders can be placed on literally any image in the game and I actually got much better framerates inside Ren’Py then I did inside the Shadertoy website itself.</summary></entry><entry><title type="html">Thoughts on Triggers</title><link href="https://ipreg.github.io/2021/10/22/Thoughts-On-Triggers.html" rel="alternate" type="text/html" title="Thoughts on Triggers" /><published>2021-10-22T00:00:00-04:00</published><updated>2021-10-22T00:00:00-04:00</updated><id>https://ipreg.github.io/2021/10/22/Thoughts-On-Triggers</id><content type="html" xml:base="https://ipreg.github.io/2021/10/22/Thoughts-On-Triggers.html">&lt;p&gt;A key goal of mine when I went into “A Town Unfiltered” was to make it as dynamic as possible. The original game was running into technical debt where every change had to be accounted for in long sections of if-else statements. This lead to a large list of “story” variables which kept track of the game state and different situations had to ensure what combination of story variables were what values to lead the player into the correct conversation. This is really bad game design on the development side, while it initially allows for quick prototyping and iteration due to the simplicity of the code, for anything more complex than a game jam game it will become a ball and chain where it slows development and to fix becomes making a whole new game. This is what I suspect occurred with “yandere simulator” and it could happen to “A Town Uncovered”, I think that the story events are disparate enough that this sort of design kind of works because they are essentially making a bunch of small games inside a big one, which might prevent them from falling into a similar trap (Having the resources to pay for programmers to spend the time to trudge through it helps too).
&lt;!--more--&gt;&lt;/p&gt;
&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;To say this is unacceptable to me is a vast understatement, my honor as a programmer is on the line &lt;em&gt;/s&lt;/em&gt; and my first step was to completely throw out all the code that was written except the location screens (even then I ended up massively changing them). I used this project as a way to hone my skills in python and I have become a much, much better programmer for it; the hours and hours I spent writing and rewriting my code to be better and more dynamic is something I am quite proud of. I could literally spend days discussing every single system I put into this thing, and now that I have this blog, I just might.&lt;/p&gt;

&lt;h3 id=&quot;the-story-machine&quot;&gt;The Story Machine&lt;/h3&gt;
&lt;p&gt;To start off the overall structure of the game is that there is a “god object” which all objects submit changes to the game’s state and read the game’s state from. I know that “god objects” are generally looked down upon in game-dev, but I have a reason for this design choice. Ren’Py has some very funny ideas about what a local and global variable means, as well as how accessing variables and setting variables works. This comes from the fact that Ren’Py messes with python itself to accomplish what it does, but this also can lead to unexpected behavior when you are doing as much in python as I am. I needed a way to ensure that “global/local story variables” and “global/local making-the-game-go variables” didn’t mix or influence each other. I solved this with a “god object” which stores all story variables as well as all the core game objects which need to manipulate those variables. Now of course, there are a couple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;global storyMachine&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;storyMachine&lt;/code&gt; is the god object) floating around, but overall I have segregated functionalities into classes as much as I could and prevent the use of global variables as much as possible. This has greatly helped in debugging as well as the python stack traces usually lead directly to the problem.&lt;/p&gt;

&lt;h3 id=&quot;triggers-finally-getting-to-the-title&quot;&gt;Triggers, finally getting to the title&lt;/h3&gt;
&lt;p&gt;So how does this all fit together with what I actually want to discuss here, triggers? Well, how does one perform state checks to see if the game should do something at a given time when nothing is global or set in stone? Easy, you create a family of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Trigger&lt;/code&gt; objects and classes; anything in the game (and not during a conversation) which needs to perform a state check is given a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Trigger&lt;/code&gt; object and if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Trigger&lt;/code&gt; object’s conditions are satisfied it turns on.&lt;/p&gt;

&lt;p&gt;As an example, let’s say I want to check if a Map Button should be active based on a variable called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;story_var&lt;/code&gt;, if I was using the style of the original you would do something like this:
&lt;strong&gt;map_locations.rpy&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;label some_location_map:
  if story_var &amp;gt; 10:
    jump some_location
  else:
    pov &quot;I shouldn't be going there right now&quot;
    jump map
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But using my trigger system that exact same check looks like this:
&lt;strong&gt;act_1_setup.rpy&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dont_go_right_now = Trigger(LT, &quot;story_var&quot;, 10, msg=&quot;I shouldn't be going there right now&quot;)
$ storyMachine.map.add_disable_trigger(dont_go_right_now, &quot;some_location&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To break down what my code is saying: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LT&lt;/code&gt; is the “Less Than” function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;story_var&lt;/code&gt; is the name of the state we want to check, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt; is the value to check against, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;msg&lt;/code&gt; is some metadata used by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map&lt;/code&gt; object to set the disabled message for that button as all triggers can have any amount of metadata attached to them.
It definitely is more complicated, so what are the benefits? Well, lets say I now need to add an additional condition to prevent the main character from free-roaming based on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;story_var_2&lt;/code&gt; and a conversation, what would that look like?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;map_locations.rpy&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;label some_location_map:
  if story_var &amp;gt; 10 and not talked_to_polly:
    jump some_location
  elif story_var_2 &amp;gt; 20 and talked_to_polly:
    pov &quot;I should be going to the lake&quot;
    jump map
  elif talked_to_polly:
    jump some_location
  else:
    pov &quot;I shouldn't be going there right now&quot;
    jump map
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But using my trigger system one way to perform that exact same check would look like this:
&lt;strong&gt;act_1_setup.rpy&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dont_go_right_now = Trigger(LT, &quot;story_var&quot;, 10, msg=&quot;I shouldn't be going there right now&quot;)
$ storyMachine.map.add_disable_trigger(dont_go_right_now, &quot;some_location&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;talk_to_polly.rpy&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pol &quot;You need to go to the lake after talking with Alice&quot;
$ go_to_lake = Trigger(GT, &quot;story_var_2&quot;, 20, msg=&quot;I should go to the Lake&quot;)
$ storyMachine.map.add_enable_trigger(go_to_lake, &quot;lake&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This example should show the full benefits of the trigger system. Triggers can be created and added anywhere, so I if I need to change the behavior of something halfway through the game, I can easily do it and don’t need to check if previous events occurred.  The individual classes and functions which use them can decide based on context how to use them, so in this case &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_disable_trigger&lt;/code&gt; prevents a button from being used, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_enable_trigger&lt;/code&gt; prevents &lt;em&gt;all other non-enabled buttons&lt;/em&gt; from being used. Finally, I don’t need to worry about every permutation of the game state, or make super generic responses; I can control just the specific parts I want without too much trouble.&lt;/p&gt;

&lt;h3 id=&quot;compound-triggers&quot;&gt;Compound Triggers&lt;/h3&gt;

&lt;p&gt;So the specifics of how triggers work is based around &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renpy.partial&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;renpy.curry&lt;/code&gt;; these allow for turning python functions into Ren’Py objects. Those variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LT&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GT&lt;/code&gt; are not strings which the function then looks up, those &lt;strong&gt;&lt;em&gt;are&lt;/em&gt;&lt;/strong&gt; the less-than and greater-than functions, which the trigger just throws the values into and returns the result whenever checked. These are essentially portable and dynamic if statements. Unlike if statements though, these can be removed, swapped, created, and changed on the fly during the game. But, if these are like if statements, can we combine them using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Yes, using the power of “metaclasses”, a “dunder function” builder function, a “MixIn” super class, logic operator classes, and compound classes, I was able to create a system which allows for these kind of things where logic and triggers can be combined effortlessly:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ GTE = GT | EQ
$ NQ = ~EQ
$ stop_criminal_trigger = Trigger(GT, &quot;star_level&quot;, 3) | (PlayerInfoTrigger(GTE, &quot;money&quot;, 1e6) &amp;amp; HourTrigger(NQ, Hour.NIGHT))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But that is a story for another time.&lt;/p&gt;</content><author><name>ipreg</name></author><summary type="html">A key goal of mine when I went into “A Town Unfiltered” was to make it as dynamic as possible. The original game was running into technical debt where every change had to be accounted for in long sections of if-else statements. This lead to a large list of “story” variables which kept track of the game state and different situations had to ensure what combination of story variables were what values to lead the player into the correct conversation. This is really bad game design on the development side, while it initially allows for quick prototyping and iteration due to the simplicity of the code, for anything more complex than a game jam game it will become a ball and chain where it slows development and to fix becomes making a whole new game. This is what I suspect occurred with “yandere simulator” and it could happen to “A Town Uncovered”, I think that the story events are disparate enough that this sort of design kind of works because they are essentially making a bunch of small games inside a big one, which might prevent them from falling into a similar trap (Having the resources to pay for programmers to spend the time to trudge through it helps too).</summary></entry><entry><title type="html">Thoughts on Ren’Py Overall</title><link href="https://ipreg.github.io/2021/09/25/thoughts-on-renpy.html" rel="alternate" type="text/html" title="Thoughts on Ren’Py Overall" /><published>2021-09-25T00:00:00-04:00</published><updated>2021-09-25T00:00:00-04:00</updated><id>https://ipreg.github.io/2021/09/25/thoughts-on-renpy</id><content type="html" xml:base="https://ipreg.github.io/2021/09/25/thoughts-on-renpy.html">&lt;p&gt;This is an old post I made when I was (at the time) playing around a lot with dynamic scenes with lots of custom &lt;a href=&quot;https://www.renpy.org/dev-doc/html/cdd.html&quot;&gt;displayable&lt;/a&gt; objects; while that code was not used for version -0.1 of the mod, the rabbit hole I went down taught me a lot about how renpy actually takes images and puts them on screen; and also how to manipulate them. If you really wanted to, you can build any kind of game inside Ren’Py; it probably wouldn’t run very well, but the amount of flexibility is amazing. I have slightly edited the post, if you want to see the original click &lt;a href=&quot;https://f95zone.to/threads/a-town-unfiltered-a-town-uncovered-mod-wolfregis.34101/page-17#post-6059223&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;post&quot;&gt;Post&lt;/h3&gt;
&lt;p&gt;Renpy is simultaneously really powerful and really not. What I mean is that renpytom has a very specific philosophy about the type of engine he is building, which seems to be: my engine is for visual novels. As I have worked extensively with renpy for several months now, I would like to add to that statement. Specifically, renpy is for “reversible” and “skippable” visual novels with basic minigames thrown in. When I first started working with renpy it seemed like a really nice API for displaying images and text with pygame.&lt;/p&gt;

&lt;p&gt;Later, as I got more familiar with it, I found that in actuality it is a really nice “reversible” API for displaying images and text with pygame, which is a key difference. Nearly everything in the engine is either: building the API, or accommodating non-linear time. I have read so much of the renpy source code building this thing and I am super impressed. Not only does he comment his code really well, but what the engine does with python is amazing. This is a trap I nearly fell into, and I want to explain.&lt;/p&gt;

&lt;p&gt;When I first started, I was quite excited, as I have a lot of experience with python and I originally tried to do as much as possible in it. I even got a little bit of the mod working with pure python. Then I tried running it, and saving it, and loading it, and rollback. Needless to say it broke, it broke so hard that renpy’s usual error messages didn’t work and it wouldn’t crash. I then went back and redid it in as much of renpy as possible, this actually worked! This was the start of my philosophy about the use of python in renpy: use renpy constructs or ensure that I am just transforming/creating core python objects (or classes made up of core python objects which extend renpy.store.object). The reason I do this is to ensure that anything I do in python doesn’t conflict with renpy and it’s reversibility.&lt;/p&gt;

&lt;p&gt;After reading the source code I later learned that Ren’Py Tom rewrote most of the core python objects so that python would work with rollback (though based on documentation he really doesn’t want you to go too far away from renpy stuff). This is a core tenant of the engine by it’s design and by Ren’Py Tom’s words on &lt;a href=&quot;https://www.renpy.org/doc/html/save_load_rollback.html&quot;&gt;the documentation&lt;/a&gt;; also how renpy saves/loads is also based around this principle.&lt;/p&gt;

&lt;p&gt;Our mod is a visual novel, or at least a modification of one, so renpy is perfect for this, and while programming I keep in mind that everything I am building in it is in service of one. So even with all the new objects and managers, I want to ultimately make it easier to make conversations and change around when, where, and how conversations happen and look. I try to use renpy where possible to ensure rollback and skipping still works (Outside of the texting conversations, which is a small part of the game). The ultimate gameplay mechanic is still interacting with/triggering conversations which tells the story.&lt;/p&gt;

&lt;p&gt;When encountering how powerful renpy is (esp with custom displayables), I found that it was easy to get lost in the weeds start using it as a pygame API (for an example which I learned from: &lt;a href=&quot;https://github.com/RuolinZheng08/renpy-chess-engine/&quot;&gt;https://github.com/RuolinZheng08/renpy-chess-engine/&lt;/a&gt;). I have since seen one or two examples of projects trying to do too much with renpy and start breaking the engine or fighting with the engine then giving up (which I found in my googling adventures and I am trying to avoid). If you find yourself needing to disable rollback for your game to work or starting to not build a visual novel, then in the words of &lt;a href=&quot;https://github.com/renpy/renpy/blob/master/tutorial/game/indepth_minigame.rpy#L278&quot;&gt;from Ren’Py Tom Himself&lt;/a&gt;, you probably need to switch engines. I recommended Godot with &lt;a href=&quot;https://github.com/coppolaemilio/dialogic/&quot;&gt;dialogic&lt;/a&gt; if you find yourself hitting a wall with renpy as GDScript has python-like qualities to it while being a fully featured game engine (which is free and open source).&lt;/p&gt;

&lt;p&gt;TL;DR: Renpy is a reversible visual novel engine which makes it really easy to make said visual novels. If you need something more than that, choose a different engine.&lt;/p&gt;

&lt;p&gt;P.S: For the love of all that is holy and unholy, do not build an engine yourself if you ever want to release a game: &lt;a href=&quot;https://geometrian.com/programming/tutorials/write-games-not-engines/&quot;&gt;https://geometrian.com/programming/tutorials/write-games-not-engines/&lt;/a&gt;&lt;/p&gt;</content><author><name>ipreg</name></author><summary type="html">This is an old post I made when I was (at the time) playing around a lot with dynamic scenes with lots of custom displayable objects; while that code was not used for version -0.1 of the mod, the rabbit hole I went down taught me a lot about how renpy actually takes images and puts them on screen; and also how to manipulate them. If you really wanted to, you can build any kind of game inside Ren’Py; it probably wouldn’t run very well, but the amount of flexibility is amazing. I have slightly edited the post, if you want to see the original click here.</summary></entry><entry><title type="html">Welcome to my blog!</title><link href="https://ipreg.github.io/2021/09/25/welcome.html" rel="alternate" type="text/html" title="Welcome to my blog!" /><published>2021-09-25T00:00:00-04:00</published><updated>2021-09-25T00:00:00-04:00</updated><id>https://ipreg.github.io/2021/09/25/welcome</id><content type="html" xml:base="https://ipreg.github.io/2021/09/25/welcome.html">&lt;p&gt;Welcome to the blog! I am semi-active on the &lt;a href=&quot;https://f95zone.to/members/ipreg.2927439/&quot;&gt;F95 Zone&lt;/a&gt; and the programmer for the mod &lt;a href=&quot;https://f95zone.to/threads/a-town-unfiltered-a-town-uncovered-mod-wolfregis.34101/&quot;&gt;A Town Unfiltered&lt;/a&gt;. Working on A Town Unfiltered has really filled my head with thoughts that I want to get out into the world and F95 doesn’t really have a good way to do this (it is a forum first and foremost after all); so I’ll post it here, where it will stay until github’s servers implode or something.&lt;/p&gt;

&lt;p&gt;For anyone interested, this website is a bunch of static pages being hosted with &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; and created using &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;Minima&lt;/a&gt;.&lt;/p&gt;</content><author><name>ipreg</name></author><summary type="html">Welcome to the blog! I am semi-active on the F95 Zone and the programmer for the mod A Town Unfiltered. Working on A Town Unfiltered has really filled my head with thoughts that I want to get out into the world and F95 doesn’t really have a good way to do this (it is a forum first and foremost after all); so I’ll post it here, where it will stay until github’s servers implode or something.</summary></entry></feed>